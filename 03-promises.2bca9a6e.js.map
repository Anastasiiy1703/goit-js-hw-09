{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAW,CACfC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,uBAC9BE,KAAMH,SAASC,cAAc,sBAC7BG,OAAQJ,SAASC,cAAc,wBAC/BI,iBAAkBL,SAASC,cAAc,WA4B3C,SAASK,EAAcC,EAAUL,GAC/B,OAAO,IAAIM,SAAQ,CAACC,EAASC,KACLC,KAAKC,SAAW,GAEpCH,EAAQ,C,SAAEF,E,MAAUL,IAEpBQ,EAAO,C,SAAEH,E,MAAUL,GAAQ,G,CA/BjCJ,EAASC,KAAKc,iBAAiB,UAE/B,SAAwBC,GACtBA,EAAMC,iBACN,MAAMC,EAAQC,SAASnB,EAASI,MAAMgB,OAChCf,EAAOc,SAASnB,EAASK,KAAKe,OAC9Bd,EAASa,SAASnB,EAASM,OAAOc,OACxC,IAAIC,EAAeH,EAEnB,IAAK,IAAII,EAAI,EAAGA,EAAIhB,EAAQgB,GAAG,EAC7Bd,EAAcc,EAAI,EAAGD,GAClBE,MAAK,EAACd,SAAEA,EAAQL,MAAEA,MACjBoB,YAAW,KACTC,EAAA3B,GAAS4B,OAAOC,QAAQ,uBAAqBlB,QAAiBL,MAAU,GACvEA,EAAM,IAEVwB,OAAM,EAACnB,SAAEA,EAAQL,MAAEA,MAClBoB,YAAW,KACTC,EAAA3B,GAAS4B,OAAOC,QAAQ,sBAAoBlB,QAAeL,MAAU,GACpEA,EAAM,IAEbiB,GAAgBhB,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst elements = {\n  form: document.querySelector(\".form\"),\n  delay: document.querySelector(\"input[name='delay']\"),\n  step: document.querySelector(\"input[name='step']\"),\n  amount: document.querySelector(\"input[name='amount']\"),\n  createPromiseBtn: document.querySelector(\"button\")\n}\n\nelements.form.addEventListener('submit', handlerPromise);\n\nfunction handlerPromise(event) {\n  event.preventDefault();\n  const delay = parseInt(elements.delay.value);\n  const step = parseInt(elements.step.value);\n  const amount = parseInt(elements.amount.value);\n  let currentDelay = delay;\n  \n  for (let i = 0; i < amount; i+=1) {\n    createPromise(i + 1, currentDelay)\n      .then(({ position, delay }) => {\n        setTimeout(() => {\n          Notiflix.Notify.failure(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        }, delay);\n      })\n      .catch(({ position, delay }) => {\n        setTimeout(() => {\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        }, delay);\n      });\n    currentDelay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$elements","form","document","querySelector","delay","step","amount","createPromiseBtn","$47d4ff9957288465$var$createPromise","position","Promise","resolve","reject","Math","random","addEventListener","event","preventDefault","delay1","parseInt","value","currentDelay","i","then","setTimeout","$parcel$interopDefault","Notify","failure","catch"],"version":3,"file":"03-promises.2bca9a6e.js.map"}