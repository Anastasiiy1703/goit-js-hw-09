{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAW,CACfC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,uBAC9BE,KAAMH,SAASC,cAAc,sBAC7BG,OAAQJ,SAASC,cAAc,wBAC/BI,iBAAkBL,SAASC,cAAc,WA4B3C,SAASK,EAAcC,EAAUL,GAC/B,OAAO,IAAIM,SAAQ,SAACC,EAASC,GACLC,KAAKC,SAAW,GAEpCH,EAAQ,CAAEF,WAAUL,UAEpBQ,EAAO,CAAEH,WAAUL,S,IA/BzBJ,EAASC,KAAKc,iBAAiB,UAE/B,SAAwBC,GACtBA,EAAMC,iBAMN,IALA,IAAMC,EAAQC,SAASnB,EAASI,MAAMgB,OAChCf,EAAOc,SAASnB,EAASK,KAAKe,OAC9Bd,EAASa,SAASnB,EAASM,OAAOc,OACpCC,EAAeH,EAEVI,EAAI,EAAGA,EAAIhB,EAAQgB,GAAG,EAC7Bd,EAAcc,EAAI,EAAGD,GAClBE,MAAK,SAAAC,G,IAAGf,EAAQe,EAARf,SAAUL,EAAKoB,EAALpB,MACjBqB,YAAW,WACTC,EAAA5B,GAAS6B,OAAOC,QAAQ,uBAAwCC,OAAfpB,EAAS,QAAYoB,OAANzB,EAAM,M,GACrEA,E,IAEJ0B,OAAM,SAAAN,G,IAAGf,EAAQe,EAARf,SAAUL,EAAKoB,EAALpB,MAClBqB,YAAW,WACTC,EAAA5B,GAAS6B,OAAOC,QAAQ,sBAAqCC,OAAfpB,EAAS,QAAYoB,OAANzB,EAAM,M,GAClEA,E,IAEPiB,GAAgBhB,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst elements = {\n  form: document.querySelector(\".form\"),\n  delay: document.querySelector(\"input[name='delay']\"),\n  step: document.querySelector(\"input[name='step']\"),\n  amount: document.querySelector(\"input[name='amount']\"),\n  createPromiseBtn: document.querySelector(\"button\")\n}\n\nelements.form.addEventListener('submit', handlerPromise);\n\nfunction handlerPromise(event) {\n  event.preventDefault();\n  const delay = parseInt(elements.delay.value);\n  const step = parseInt(elements.step.value);\n  const amount = parseInt(elements.amount.value);\n  let currentDelay = delay;\n  \n  for (let i = 0; i < amount; i+=1) {\n    createPromise(i + 1, currentDelay)\n      .then(({ position, delay }) => {\n        setTimeout(() => {\n          Notiflix.Notify.failure(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        }, delay);\n      })\n      .catch(({ position, delay }) => {\n        setTimeout(() => {\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        }, delay);\n      });\n    currentDelay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$elements","form","document","querySelector","delay","step","amount","createPromiseBtn","$ce04d3a99e08e73b$var$createPromise","position","Promise","resolve","reject","Math","random","addEventListener","event","preventDefault","delay1","parseInt","value","currentDelay","i","then","param","setTimeout","$parcel$interopDefault","Notify","failure","concat","catch"],"version":3,"file":"03-promises.0551fc03.js.map"}